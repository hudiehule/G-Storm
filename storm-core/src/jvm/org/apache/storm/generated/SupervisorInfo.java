/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class SupervisorInfo implements org.apache.thrift.TBase<SupervisorInfo, SupervisorInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SupervisorInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SupervisorInfo");

  private static final org.apache.thrift.protocol.TField TIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("time_secs", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ASSIGNMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assignment_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USED_PORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("used_ports", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField META_FIELD_DESC = new org.apache.thrift.protocol.TField("meta", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SCHEDULER_META_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduler_meta", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField UPTIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("uptime_secs", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RESOURCES_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("resources_map", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SupervisorInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SupervisorInfoTupleSchemeFactory();

  public long time_secs; // required
  public java.lang.String hostname; // required
  public java.lang.String assignment_id; // optional
  public java.util.List<java.lang.Long> used_ports; // optional
  public java.util.List<java.lang.Long> meta; // optional
  public java.util.Map<java.lang.String,java.lang.String> scheduler_meta; // optional
  public long uptime_secs; // optional
  public java.lang.String version; // optional
  public java.util.Map<java.lang.String,java.lang.Double> resources_map; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME_SECS((short)1, "time_secs"),
    HOSTNAME((short)2, "hostname"),
    ASSIGNMENT_ID((short)3, "assignment_id"),
    USED_PORTS((short)4, "used_ports"),
    META((short)5, "meta"),
    SCHEDULER_META((short)6, "scheduler_meta"),
    UPTIME_SECS((short)7, "uptime_secs"),
    VERSION((short)8, "version"),
    RESOURCES_MAP((short)9, "resources_map");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME_SECS
          return TIME_SECS;
        case 2: // HOSTNAME
          return HOSTNAME;
        case 3: // ASSIGNMENT_ID
          return ASSIGNMENT_ID;
        case 4: // USED_PORTS
          return USED_PORTS;
        case 5: // META
          return META;
        case 6: // SCHEDULER_META
          return SCHEDULER_META;
        case 7: // UPTIME_SECS
          return UPTIME_SECS;
        case 8: // VERSION
          return VERSION;
        case 9: // RESOURCES_MAP
          return RESOURCES_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_SECS_ISSET_ID = 0;
  private static final int __UPTIME_SECS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ASSIGNMENT_ID,_Fields.USED_PORTS,_Fields.META,_Fields.SCHEDULER_META,_Fields.UPTIME_SECS,_Fields.VERSION,_Fields.RESOURCES_MAP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("time_secs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSIGNMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("assignment_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USED_PORTS, new org.apache.thrift.meta_data.FieldMetaData("used_ports", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.META, new org.apache.thrift.meta_data.FieldMetaData("meta", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.SCHEDULER_META, new org.apache.thrift.meta_data.FieldMetaData("scheduler_meta", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UPTIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("uptime_secs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCES_MAP, new org.apache.thrift.meta_data.FieldMetaData("resources_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SupervisorInfo.class, metaDataMap);
  }

  public SupervisorInfo() {
  }

  public SupervisorInfo(
    long time_secs,
    java.lang.String hostname)
  {
    this();
    this.time_secs = time_secs;
    setTime_secsIsSet(true);
    this.hostname = hostname;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SupervisorInfo(SupervisorInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.time_secs = other.time_secs;
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    if (other.isSetAssignment_id()) {
      this.assignment_id = other.assignment_id;
    }
    if (other.isSetUsed_ports()) {
      java.util.List<java.lang.Long> __this__used_ports = new java.util.ArrayList<java.lang.Long>(other.used_ports);
      this.used_ports = __this__used_ports;
    }
    if (other.isSetMeta()) {
      java.util.List<java.lang.Long> __this__meta = new java.util.ArrayList<java.lang.Long>(other.meta);
      this.meta = __this__meta;
    }
    if (other.isSetScheduler_meta()) {
      java.util.Map<java.lang.String,java.lang.String> __this__scheduler_meta = new java.util.HashMap<java.lang.String,java.lang.String>(other.scheduler_meta);
      this.scheduler_meta = __this__scheduler_meta;
    }
    this.uptime_secs = other.uptime_secs;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetResources_map()) {
      java.util.Map<java.lang.String,java.lang.Double> __this__resources_map = new java.util.HashMap<java.lang.String,java.lang.Double>(other.resources_map);
      this.resources_map = __this__resources_map;
    }
  }

  public SupervisorInfo deepCopy() {
    return new SupervisorInfo(this);
  }

  @Override
  public void clear() {
    setTime_secsIsSet(false);
    this.time_secs = 0;
    this.hostname = null;
    this.assignment_id = null;
    this.used_ports = null;
    this.meta = null;
    this.scheduler_meta = null;
    setUptime_secsIsSet(false);
    this.uptime_secs = 0;
    this.version = null;
    this.resources_map = null;
  }

  public long getTime_secs() {
    return this.time_secs;
  }

  public SupervisorInfo setTime_secs(long time_secs) {
    this.time_secs = time_secs;
    setTime_secsIsSet(true);
    return this;
  }

  public void unsetTime_secs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_SECS_ISSET_ID);
  }

  /** Returns true if field time_secs is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_secs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_SECS_ISSET_ID);
  }

  public void setTime_secsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_SECS_ISSET_ID, value);
  }

  public java.lang.String getHostname() {
    return this.hostname;
  }

  public SupervisorInfo setHostname(java.lang.String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public java.lang.String getAssignment_id() {
    return this.assignment_id;
  }

  public SupervisorInfo setAssignment_id(java.lang.String assignment_id) {
    this.assignment_id = assignment_id;
    return this;
  }

  public void unsetAssignment_id() {
    this.assignment_id = null;
  }

  /** Returns true if field assignment_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAssignment_id() {
    return this.assignment_id != null;
  }

  public void setAssignment_idIsSet(boolean value) {
    if (!value) {
      this.assignment_id = null;
    }
  }

  public int getUsed_portsSize() {
    return (this.used_ports == null) ? 0 : this.used_ports.size();
  }

  public java.util.Iterator<java.lang.Long> getUsed_portsIterator() {
    return (this.used_ports == null) ? null : this.used_ports.iterator();
  }

  public void addToUsed_ports(long elem) {
    if (this.used_ports == null) {
      this.used_ports = new java.util.ArrayList<java.lang.Long>();
    }
    this.used_ports.add(elem);
  }

  public java.util.List<java.lang.Long> getUsed_ports() {
    return this.used_ports;
  }

  public SupervisorInfo setUsed_ports(java.util.List<java.lang.Long> used_ports) {
    this.used_ports = used_ports;
    return this;
  }

  public void unsetUsed_ports() {
    this.used_ports = null;
  }

  /** Returns true if field used_ports is set (has been assigned a value) and false otherwise */
  public boolean isSetUsed_ports() {
    return this.used_ports != null;
  }

  public void setUsed_portsIsSet(boolean value) {
    if (!value) {
      this.used_ports = null;
    }
  }

  public int getMetaSize() {
    return (this.meta == null) ? 0 : this.meta.size();
  }

  public java.util.Iterator<java.lang.Long> getMetaIterator() {
    return (this.meta == null) ? null : this.meta.iterator();
  }

  public void addToMeta(long elem) {
    if (this.meta == null) {
      this.meta = new java.util.ArrayList<java.lang.Long>();
    }
    this.meta.add(elem);
  }

  public java.util.List<java.lang.Long> getMeta() {
    return this.meta;
  }

  public SupervisorInfo setMeta(java.util.List<java.lang.Long> meta) {
    this.meta = meta;
    return this;
  }

  public void unsetMeta() {
    this.meta = null;
  }

  /** Returns true if field meta is set (has been assigned a value) and false otherwise */
  public boolean isSetMeta() {
    return this.meta != null;
  }

  public void setMetaIsSet(boolean value) {
    if (!value) {
      this.meta = null;
    }
  }

  public int getScheduler_metaSize() {
    return (this.scheduler_meta == null) ? 0 : this.scheduler_meta.size();
  }

  public void putToScheduler_meta(java.lang.String key, java.lang.String val) {
    if (this.scheduler_meta == null) {
      this.scheduler_meta = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.scheduler_meta.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getScheduler_meta() {
    return this.scheduler_meta;
  }

  public SupervisorInfo setScheduler_meta(java.util.Map<java.lang.String,java.lang.String> scheduler_meta) {
    this.scheduler_meta = scheduler_meta;
    return this;
  }

  public void unsetScheduler_meta() {
    this.scheduler_meta = null;
  }

  /** Returns true if field scheduler_meta is set (has been assigned a value) and false otherwise */
  public boolean isSetScheduler_meta() {
    return this.scheduler_meta != null;
  }

  public void setScheduler_metaIsSet(boolean value) {
    if (!value) {
      this.scheduler_meta = null;
    }
  }

  public long getUptime_secs() {
    return this.uptime_secs;
  }

  public SupervisorInfo setUptime_secs(long uptime_secs) {
    this.uptime_secs = uptime_secs;
    setUptime_secsIsSet(true);
    return this;
  }

  public void unsetUptime_secs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID);
  }

  /** Returns true if field uptime_secs is set (has been assigned a value) and false otherwise */
  public boolean isSetUptime_secs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID);
  }

  public void setUptime_secsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID, value);
  }

  public java.lang.String getVersion() {
    return this.version;
  }

  public SupervisorInfo setVersion(java.lang.String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public int getResources_mapSize() {
    return (this.resources_map == null) ? 0 : this.resources_map.size();
  }

  public void putToResources_map(java.lang.String key, double val) {
    if (this.resources_map == null) {
      this.resources_map = new java.util.HashMap<java.lang.String,java.lang.Double>();
    }
    this.resources_map.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.Double> getResources_map() {
    return this.resources_map;
  }

  public SupervisorInfo setResources_map(java.util.Map<java.lang.String,java.lang.Double> resources_map) {
    this.resources_map = resources_map;
    return this;
  }

  public void unsetResources_map() {
    this.resources_map = null;
  }

  /** Returns true if field resources_map is set (has been assigned a value) and false otherwise */
  public boolean isSetResources_map() {
    return this.resources_map != null;
  }

  public void setResources_mapIsSet(boolean value) {
    if (!value) {
      this.resources_map = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TIME_SECS:
      if (value == null) {
        unsetTime_secs();
      } else {
        setTime_secs((java.lang.Long)value);
      }
      break;

    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((java.lang.String)value);
      }
      break;

    case ASSIGNMENT_ID:
      if (value == null) {
        unsetAssignment_id();
      } else {
        setAssignment_id((java.lang.String)value);
      }
      break;

    case USED_PORTS:
      if (value == null) {
        unsetUsed_ports();
      } else {
        setUsed_ports((java.util.List<java.lang.Long>)value);
      }
      break;

    case META:
      if (value == null) {
        unsetMeta();
      } else {
        setMeta((java.util.List<java.lang.Long>)value);
      }
      break;

    case SCHEDULER_META:
      if (value == null) {
        unsetScheduler_meta();
      } else {
        setScheduler_meta((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case UPTIME_SECS:
      if (value == null) {
        unsetUptime_secs();
      } else {
        setUptime_secs((java.lang.Long)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.String)value);
      }
      break;

    case RESOURCES_MAP:
      if (value == null) {
        unsetResources_map();
      } else {
        setResources_map((java.util.Map<java.lang.String,java.lang.Double>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME_SECS:
      return getTime_secs();

    case HOSTNAME:
      return getHostname();

    case ASSIGNMENT_ID:
      return getAssignment_id();

    case USED_PORTS:
      return getUsed_ports();

    case META:
      return getMeta();

    case SCHEDULER_META:
      return getScheduler_meta();

    case UPTIME_SECS:
      return getUptime_secs();

    case VERSION:
      return getVersion();

    case RESOURCES_MAP:
      return getResources_map();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TIME_SECS:
      return isSetTime_secs();
    case HOSTNAME:
      return isSetHostname();
    case ASSIGNMENT_ID:
      return isSetAssignment_id();
    case USED_PORTS:
      return isSetUsed_ports();
    case META:
      return isSetMeta();
    case SCHEDULER_META:
      return isSetScheduler_meta();
    case UPTIME_SECS:
      return isSetUptime_secs();
    case VERSION:
      return isSetVersion();
    case RESOURCES_MAP:
      return isSetResources_map();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SupervisorInfo)
      return this.equals((SupervisorInfo)that);
    return false;
  }

  public boolean equals(SupervisorInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_time_secs = true;
    boolean that_present_time_secs = true;
    if (this_present_time_secs || that_present_time_secs) {
      if (!(this_present_time_secs && that_present_time_secs))
        return false;
      if (this.time_secs != that.time_secs)
        return false;
    }

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_assignment_id = true && this.isSetAssignment_id();
    boolean that_present_assignment_id = true && that.isSetAssignment_id();
    if (this_present_assignment_id || that_present_assignment_id) {
      if (!(this_present_assignment_id && that_present_assignment_id))
        return false;
      if (!this.assignment_id.equals(that.assignment_id))
        return false;
    }

    boolean this_present_used_ports = true && this.isSetUsed_ports();
    boolean that_present_used_ports = true && that.isSetUsed_ports();
    if (this_present_used_ports || that_present_used_ports) {
      if (!(this_present_used_ports && that_present_used_ports))
        return false;
      if (!this.used_ports.equals(that.used_ports))
        return false;
    }

    boolean this_present_meta = true && this.isSetMeta();
    boolean that_present_meta = true && that.isSetMeta();
    if (this_present_meta || that_present_meta) {
      if (!(this_present_meta && that_present_meta))
        return false;
      if (!this.meta.equals(that.meta))
        return false;
    }

    boolean this_present_scheduler_meta = true && this.isSetScheduler_meta();
    boolean that_present_scheduler_meta = true && that.isSetScheduler_meta();
    if (this_present_scheduler_meta || that_present_scheduler_meta) {
      if (!(this_present_scheduler_meta && that_present_scheduler_meta))
        return false;
      if (!this.scheduler_meta.equals(that.scheduler_meta))
        return false;
    }

    boolean this_present_uptime_secs = true && this.isSetUptime_secs();
    boolean that_present_uptime_secs = true && that.isSetUptime_secs();
    if (this_present_uptime_secs || that_present_uptime_secs) {
      if (!(this_present_uptime_secs && that_present_uptime_secs))
        return false;
      if (this.uptime_secs != that.uptime_secs)
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_resources_map = true && this.isSetResources_map();
    boolean that_present_resources_map = true && that.isSetResources_map();
    if (this_present_resources_map || that_present_resources_map) {
      if (!(this_present_resources_map && that_present_resources_map))
        return false;
      if (!this.resources_map.equals(that.resources_map))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time_secs);

    hashCode = hashCode * 8191 + ((isSetHostname()) ? 131071 : 524287);
    if (isSetHostname())
      hashCode = hashCode * 8191 + hostname.hashCode();

    hashCode = hashCode * 8191 + ((isSetAssignment_id()) ? 131071 : 524287);
    if (isSetAssignment_id())
      hashCode = hashCode * 8191 + assignment_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsed_ports()) ? 131071 : 524287);
    if (isSetUsed_ports())
      hashCode = hashCode * 8191 + used_ports.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeta()) ? 131071 : 524287);
    if (isSetMeta())
      hashCode = hashCode * 8191 + meta.hashCode();

    hashCode = hashCode * 8191 + ((isSetScheduler_meta()) ? 131071 : 524287);
    if (isSetScheduler_meta())
      hashCode = hashCode * 8191 + scheduler_meta.hashCode();

    hashCode = hashCode * 8191 + ((isSetUptime_secs()) ? 131071 : 524287);
    if (isSetUptime_secs())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uptime_secs);

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + version.hashCode();

    hashCode = hashCode * 8191 + ((isSetResources_map()) ? 131071 : 524287);
    if (isSetResources_map())
      hashCode = hashCode * 8191 + resources_map.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SupervisorInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTime_secs()).compareTo(other.isSetTime_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_secs, other.time_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAssignment_id()).compareTo(other.isSetAssignment_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssignment_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignment_id, other.assignment_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUsed_ports()).compareTo(other.isSetUsed_ports());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsed_ports()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.used_ports, other.used_ports);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMeta()).compareTo(other.isSetMeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meta, other.meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScheduler_meta()).compareTo(other.isSetScheduler_meta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScheduler_meta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduler_meta, other.scheduler_meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUptime_secs()).compareTo(other.isSetUptime_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUptime_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uptime_secs, other.uptime_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResources_map()).compareTo(other.isSetResources_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResources_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resources_map, other.resources_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SupervisorInfo(");
    boolean first = true;

    sb.append("time_secs:");
    sb.append(this.time_secs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostname:");
    if (this.hostname == null) {
      sb.append("null");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (isSetAssignment_id()) {
      if (!first) sb.append(", ");
      sb.append("assignment_id:");
      if (this.assignment_id == null) {
        sb.append("null");
      } else {
        sb.append(this.assignment_id);
      }
      first = false;
    }
    if (isSetUsed_ports()) {
      if (!first) sb.append(", ");
      sb.append("used_ports:");
      if (this.used_ports == null) {
        sb.append("null");
      } else {
        sb.append(this.used_ports);
      }
      first = false;
    }
    if (isSetMeta()) {
      if (!first) sb.append(", ");
      sb.append("meta:");
      if (this.meta == null) {
        sb.append("null");
      } else {
        sb.append(this.meta);
      }
      first = false;
    }
    if (isSetScheduler_meta()) {
      if (!first) sb.append(", ");
      sb.append("scheduler_meta:");
      if (this.scheduler_meta == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduler_meta);
      }
      first = false;
    }
    if (isSetUptime_secs()) {
      if (!first) sb.append(", ");
      sb.append("uptime_secs:");
      sb.append(this.uptime_secs);
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (isSetResources_map()) {
      if (!first) sb.append(", ");
      sb.append("resources_map:");
      if (this.resources_map == null) {
        sb.append("null");
      } else {
        sb.append(this.resources_map);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'time_secs' because it's a primitive and you chose the non-beans generator.
    if (hostname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hostname' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SupervisorInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SupervisorInfoStandardScheme getScheme() {
      return new SupervisorInfoStandardScheme();
    }
  }

  private static class SupervisorInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<SupervisorInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SupervisorInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time_secs = iprot.readI64();
              struct.setTime_secsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ASSIGNMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assignment_id = iprot.readString();
              struct.setAssignment_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USED_PORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list574 = iprot.readListBegin();
                struct.used_ports = new java.util.ArrayList<java.lang.Long>(_list574.size);
                long _elem575;
                for (int _i576 = 0; _i576 < _list574.size; ++_i576)
                {
                  _elem575 = iprot.readI64();
                  struct.used_ports.add(_elem575);
                }
                iprot.readListEnd();
              }
              struct.setUsed_portsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // META
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list577 = iprot.readListBegin();
                struct.meta = new java.util.ArrayList<java.lang.Long>(_list577.size);
                long _elem578;
                for (int _i579 = 0; _i579 < _list577.size; ++_i579)
                {
                  _elem578 = iprot.readI64();
                  struct.meta.add(_elem578);
                }
                iprot.readListEnd();
              }
              struct.setMetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SCHEDULER_META
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map580 = iprot.readMapBegin();
                struct.scheduler_meta = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map580.size);
                java.lang.String _key581;
                java.lang.String _val582;
                for (int _i583 = 0; _i583 < _map580.size; ++_i583)
                {
                  _key581 = iprot.readString();
                  _val582 = iprot.readString();
                  struct.scheduler_meta.put(_key581, _val582);
                }
                iprot.readMapEnd();
              }
              struct.setScheduler_metaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPTIME_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uptime_secs = iprot.readI64();
              struct.setUptime_secsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESOURCES_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map584 = iprot.readMapBegin();
                struct.resources_map = new java.util.HashMap<java.lang.String,java.lang.Double>(2*_map584.size);
                java.lang.String _key585;
                double _val586;
                for (int _i587 = 0; _i587 < _map584.size; ++_i587)
                {
                  _key585 = iprot.readString();
                  _val586 = iprot.readDouble();
                  struct.resources_map.put(_key585, _val586);
                }
                iprot.readMapEnd();
              }
              struct.setResources_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTime_secs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'time_secs' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SupervisorInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIME_SECS_FIELD_DESC);
      oprot.writeI64(struct.time_secs);
      oprot.writeFieldEnd();
      if (struct.hostname != null) {
        oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
        oprot.writeString(struct.hostname);
        oprot.writeFieldEnd();
      }
      if (struct.assignment_id != null) {
        if (struct.isSetAssignment_id()) {
          oprot.writeFieldBegin(ASSIGNMENT_ID_FIELD_DESC);
          oprot.writeString(struct.assignment_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.used_ports != null) {
        if (struct.isSetUsed_ports()) {
          oprot.writeFieldBegin(USED_PORTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.used_ports.size()));
            for (long _iter588 : struct.used_ports)
            {
              oprot.writeI64(_iter588);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.meta != null) {
        if (struct.isSetMeta()) {
          oprot.writeFieldBegin(META_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.meta.size()));
            for (long _iter589 : struct.meta)
            {
              oprot.writeI64(_iter589);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.scheduler_meta != null) {
        if (struct.isSetScheduler_meta()) {
          oprot.writeFieldBegin(SCHEDULER_META_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.scheduler_meta.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter590 : struct.scheduler_meta.entrySet())
            {
              oprot.writeString(_iter590.getKey());
              oprot.writeString(_iter590.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUptime_secs()) {
        oprot.writeFieldBegin(UPTIME_SECS_FIELD_DESC);
        oprot.writeI64(struct.uptime_secs);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resources_map != null) {
        if (struct.isSetResources_map()) {
          oprot.writeFieldBegin(RESOURCES_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.resources_map.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter591 : struct.resources_map.entrySet())
            {
              oprot.writeString(_iter591.getKey());
              oprot.writeDouble(_iter591.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SupervisorInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SupervisorInfoTupleScheme getScheme() {
      return new SupervisorInfoTupleScheme();
    }
  }

  private static class SupervisorInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<SupervisorInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SupervisorInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.time_secs);
      oprot.writeString(struct.hostname);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAssignment_id()) {
        optionals.set(0);
      }
      if (struct.isSetUsed_ports()) {
        optionals.set(1);
      }
      if (struct.isSetMeta()) {
        optionals.set(2);
      }
      if (struct.isSetScheduler_meta()) {
        optionals.set(3);
      }
      if (struct.isSetUptime_secs()) {
        optionals.set(4);
      }
      if (struct.isSetVersion()) {
        optionals.set(5);
      }
      if (struct.isSetResources_map()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetAssignment_id()) {
        oprot.writeString(struct.assignment_id);
      }
      if (struct.isSetUsed_ports()) {
        {
          oprot.writeI32(struct.used_ports.size());
          for (long _iter592 : struct.used_ports)
          {
            oprot.writeI64(_iter592);
          }
        }
      }
      if (struct.isSetMeta()) {
        {
          oprot.writeI32(struct.meta.size());
          for (long _iter593 : struct.meta)
          {
            oprot.writeI64(_iter593);
          }
        }
      }
      if (struct.isSetScheduler_meta()) {
        {
          oprot.writeI32(struct.scheduler_meta.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter594 : struct.scheduler_meta.entrySet())
          {
            oprot.writeString(_iter594.getKey());
            oprot.writeString(_iter594.getValue());
          }
        }
      }
      if (struct.isSetUptime_secs()) {
        oprot.writeI64(struct.uptime_secs);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetResources_map()) {
        {
          oprot.writeI32(struct.resources_map.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter595 : struct.resources_map.entrySet())
          {
            oprot.writeString(_iter595.getKey());
            oprot.writeDouble(_iter595.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SupervisorInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.time_secs = iprot.readI64();
      struct.setTime_secsIsSet(true);
      struct.hostname = iprot.readString();
      struct.setHostnameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.assignment_id = iprot.readString();
        struct.setAssignment_idIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list596 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.used_ports = new java.util.ArrayList<java.lang.Long>(_list596.size);
          long _elem597;
          for (int _i598 = 0; _i598 < _list596.size; ++_i598)
          {
            _elem597 = iprot.readI64();
            struct.used_ports.add(_elem597);
          }
        }
        struct.setUsed_portsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list599 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.meta = new java.util.ArrayList<java.lang.Long>(_list599.size);
          long _elem600;
          for (int _i601 = 0; _i601 < _list599.size; ++_i601)
          {
            _elem600 = iprot.readI64();
            struct.meta.add(_elem600);
          }
        }
        struct.setMetaIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map602 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.scheduler_meta = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map602.size);
          java.lang.String _key603;
          java.lang.String _val604;
          for (int _i605 = 0; _i605 < _map602.size; ++_i605)
          {
            _key603 = iprot.readString();
            _val604 = iprot.readString();
            struct.scheduler_meta.put(_key603, _val604);
          }
        }
        struct.setScheduler_metaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uptime_secs = iprot.readI64();
        struct.setUptime_secsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map606 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.resources_map = new java.util.HashMap<java.lang.String,java.lang.Double>(2*_map606.size);
          java.lang.String _key607;
          double _val608;
          for (int _i609 = 0; _i609 < _map606.size; ++_i609)
          {
            _key607 = iprot.readString();
            _val608 = iprot.readDouble();
            struct.resources_map.put(_key607, _val608);
          }
        }
        struct.setResources_mapIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

