/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class LSSupervisorAssignments implements org.apache.thrift.TBase<LSSupervisorAssignments, LSSupervisorAssignments._Fields>, java.io.Serializable, Cloneable, Comparable<LSSupervisorAssignments> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LSSupervisorAssignments");

  private static final org.apache.thrift.protocol.TField ASSIGNMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("assignments", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LSSupervisorAssignmentsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LSSupervisorAssignmentsTupleSchemeFactory();

  public java.util.Map<java.lang.Integer,LocalAssignment> assignments; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ASSIGNMENTS((short)1, "assignments");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ASSIGNMENTS
          return ASSIGNMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ASSIGNMENTS, new org.apache.thrift.meta_data.FieldMetaData("assignments", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LocalAssignment.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LSSupervisorAssignments.class, metaDataMap);
  }

  public LSSupervisorAssignments() {
  }

  public LSSupervisorAssignments(
    java.util.Map<java.lang.Integer,LocalAssignment> assignments)
  {
    this();
    this.assignments = assignments;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LSSupervisorAssignments(LSSupervisorAssignments other) {
    if (other.isSetAssignments()) {
      java.util.Map<java.lang.Integer,LocalAssignment> __this__assignments = new java.util.HashMap<java.lang.Integer,LocalAssignment>(other.assignments.size());
      for (java.util.Map.Entry<java.lang.Integer, LocalAssignment> other_element : other.assignments.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        LocalAssignment other_element_value = other_element.getValue();

        java.lang.Integer __this__assignments_copy_key = other_element_key;

        LocalAssignment __this__assignments_copy_value = new LocalAssignment(other_element_value);

        __this__assignments.put(__this__assignments_copy_key, __this__assignments_copy_value);
      }
      this.assignments = __this__assignments;
    }
  }

  public LSSupervisorAssignments deepCopy() {
    return new LSSupervisorAssignments(this);
  }

  @Override
  public void clear() {
    this.assignments = null;
  }

  public int getAssignmentsSize() {
    return (this.assignments == null) ? 0 : this.assignments.size();
  }

  public void putToAssignments(int key, LocalAssignment val) {
    if (this.assignments == null) {
      this.assignments = new java.util.HashMap<java.lang.Integer,LocalAssignment>();
    }
    this.assignments.put(key, val);
  }

  public java.util.Map<java.lang.Integer,LocalAssignment> getAssignments() {
    return this.assignments;
  }

  public LSSupervisorAssignments setAssignments(java.util.Map<java.lang.Integer,LocalAssignment> assignments) {
    this.assignments = assignments;
    return this;
  }

  public void unsetAssignments() {
    this.assignments = null;
  }

  /** Returns true if field assignments is set (has been assigned a value) and false otherwise */
  public boolean isSetAssignments() {
    return this.assignments != null;
  }

  public void setAssignmentsIsSet(boolean value) {
    if (!value) {
      this.assignments = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ASSIGNMENTS:
      if (value == null) {
        unsetAssignments();
      } else {
        setAssignments((java.util.Map<java.lang.Integer,LocalAssignment>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ASSIGNMENTS:
      return getAssignments();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ASSIGNMENTS:
      return isSetAssignments();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LSSupervisorAssignments)
      return this.equals((LSSupervisorAssignments)that);
    return false;
  }

  public boolean equals(LSSupervisorAssignments that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_assignments = true && this.isSetAssignments();
    boolean that_present_assignments = true && that.isSetAssignments();
    if (this_present_assignments || that_present_assignments) {
      if (!(this_present_assignments && that_present_assignments))
        return false;
      if (!this.assignments.equals(that.assignments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAssignments()) ? 131071 : 524287);
    if (isSetAssignments())
      hashCode = hashCode * 8191 + assignments.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LSSupervisorAssignments other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAssignments()).compareTo(other.isSetAssignments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssignments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignments, other.assignments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LSSupervisorAssignments(");
    boolean first = true;

    sb.append("assignments:");
    if (this.assignments == null) {
      sb.append("null");
    } else {
      sb.append(this.assignments);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (assignments == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'assignments' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LSSupervisorAssignmentsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LSSupervisorAssignmentsStandardScheme getScheme() {
      return new LSSupervisorAssignmentsStandardScheme();
    }
  }

  private static class LSSupervisorAssignmentsStandardScheme extends org.apache.thrift.scheme.StandardScheme<LSSupervisorAssignments> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LSSupervisorAssignments struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ASSIGNMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map732 = iprot.readMapBegin();
                struct.assignments = new java.util.HashMap<java.lang.Integer,LocalAssignment>(2*_map732.size);
                int _key733;
                LocalAssignment _val734;
                for (int _i735 = 0; _i735 < _map732.size; ++_i735)
                {
                  _key733 = iprot.readI32();
                  _val734 = new LocalAssignment();
                  _val734.read(iprot);
                  struct.assignments.put(_key733, _val734);
                }
                iprot.readMapEnd();
              }
              struct.setAssignmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LSSupervisorAssignments struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.assignments != null) {
        oprot.writeFieldBegin(ASSIGNMENTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.assignments.size()));
          for (java.util.Map.Entry<java.lang.Integer, LocalAssignment> _iter736 : struct.assignments.entrySet())
          {
            oprot.writeI32(_iter736.getKey());
            _iter736.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LSSupervisorAssignmentsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LSSupervisorAssignmentsTupleScheme getScheme() {
      return new LSSupervisorAssignmentsTupleScheme();
    }
  }

  private static class LSSupervisorAssignmentsTupleScheme extends org.apache.thrift.scheme.TupleScheme<LSSupervisorAssignments> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LSSupervisorAssignments struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.assignments.size());
        for (java.util.Map.Entry<java.lang.Integer, LocalAssignment> _iter737 : struct.assignments.entrySet())
        {
          oprot.writeI32(_iter737.getKey());
          _iter737.getValue().write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LSSupervisorAssignments struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map738 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.assignments = new java.util.HashMap<java.lang.Integer,LocalAssignment>(2*_map738.size);
        int _key739;
        LocalAssignment _val740;
        for (int _i741 = 0; _i741 < _map738.size; ++_i741)
        {
          _key739 = iprot.readI32();
          _val740 = new LocalAssignment();
          _val740.read(iprot);
          struct.assignments.put(_key739, _val740);
        }
      }
      struct.setAssignmentsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

