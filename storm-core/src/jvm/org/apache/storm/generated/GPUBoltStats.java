/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class GPUBoltStats implements org.apache.thrift.TBase<GPUBoltStats, GPUBoltStats._Fields>, java.io.Serializable, Cloneable, Comparable<GPUBoltStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GPUBoltStats");

  private static final org.apache.thrift.protocol.TField ACKED_FIELD_DESC = new org.apache.thrift.protocol.TField("acked", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField FAILED_FIELD_DESC = new org.apache.thrift.protocol.TField("failed", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("batch_size", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GPUBoltStatsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GPUBoltStatsTupleSchemeFactory();

  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> acked; // required
  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> failed; // required
  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> batch_size; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACKED((short)1, "acked"),
    FAILED((short)2, "failed"),
    BATCH_SIZE((short)3, "batch_size");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACKED
          return ACKED;
        case 2: // FAILED
          return FAILED;
        case 3: // BATCH_SIZE
          return BATCH_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACKED, new org.apache.thrift.meta_data.FieldMetaData("acked", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.FAILED, new org.apache.thrift.meta_data.FieldMetaData("failed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("batch_size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GPUBoltStats.class, metaDataMap);
  }

  public GPUBoltStats() {
  }

  public GPUBoltStats(
    java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> acked,
    java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> failed,
    java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> batch_size)
  {
    this();
    this.acked = acked;
    this.failed = failed;
    this.batch_size = batch_size;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GPUBoltStats(GPUBoltStats other) {
    if (other.isSetAcked()) {
      java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> __this__acked = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>(other.acked.size());
      for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.Long>> other_element : other.acked.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.Map<java.lang.String,java.lang.Long> other_element_value = other_element.getValue();

        java.lang.String __this__acked_copy_key = other_element_key;

        java.util.Map<java.lang.String,java.lang.Long> __this__acked_copy_value = new java.util.HashMap<java.lang.String,java.lang.Long>(other_element_value);

        __this__acked.put(__this__acked_copy_key, __this__acked_copy_value);
      }
      this.acked = __this__acked;
    }
    if (other.isSetFailed()) {
      java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> __this__failed = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>(other.failed.size());
      for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.Long>> other_element : other.failed.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.Map<java.lang.String,java.lang.Long> other_element_value = other_element.getValue();

        java.lang.String __this__failed_copy_key = other_element_key;

        java.util.Map<java.lang.String,java.lang.Long> __this__failed_copy_value = new java.util.HashMap<java.lang.String,java.lang.Long>(other_element_value);

        __this__failed.put(__this__failed_copy_key, __this__failed_copy_value);
      }
      this.failed = __this__failed;
    }
    if (other.isSetBatch_size()) {
      java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> __this__batch_size = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>(other.batch_size.size());
      for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.Long>> other_element : other.batch_size.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.Map<java.lang.String,java.lang.Long> other_element_value = other_element.getValue();

        java.lang.String __this__batch_size_copy_key = other_element_key;

        java.util.Map<java.lang.String,java.lang.Long> __this__batch_size_copy_value = new java.util.HashMap<java.lang.String,java.lang.Long>(other_element_value);

        __this__batch_size.put(__this__batch_size_copy_key, __this__batch_size_copy_value);
      }
      this.batch_size = __this__batch_size;
    }
  }

  public GPUBoltStats deepCopy() {
    return new GPUBoltStats(this);
  }

  @Override
  public void clear() {
    this.acked = null;
    this.failed = null;
    this.batch_size = null;
  }

  public int getAckedSize() {
    return (this.acked == null) ? 0 : this.acked.size();
  }

  public void putToAcked(java.lang.String key, java.util.Map<java.lang.String,java.lang.Long> val) {
    if (this.acked == null) {
      this.acked = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>();
    }
    this.acked.put(key, val);
  }

  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> getAcked() {
    return this.acked;
  }

  public GPUBoltStats setAcked(java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> acked) {
    this.acked = acked;
    return this;
  }

  public void unsetAcked() {
    this.acked = null;
  }

  /** Returns true if field acked is set (has been assigned a value) and false otherwise */
  public boolean isSetAcked() {
    return this.acked != null;
  }

  public void setAckedIsSet(boolean value) {
    if (!value) {
      this.acked = null;
    }
  }

  public int getFailedSize() {
    return (this.failed == null) ? 0 : this.failed.size();
  }

  public void putToFailed(java.lang.String key, java.util.Map<java.lang.String,java.lang.Long> val) {
    if (this.failed == null) {
      this.failed = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>();
    }
    this.failed.put(key, val);
  }

  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> getFailed() {
    return this.failed;
  }

  public GPUBoltStats setFailed(java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> failed) {
    this.failed = failed;
    return this;
  }

  public void unsetFailed() {
    this.failed = null;
  }

  /** Returns true if field failed is set (has been assigned a value) and false otherwise */
  public boolean isSetFailed() {
    return this.failed != null;
  }

  public void setFailedIsSet(boolean value) {
    if (!value) {
      this.failed = null;
    }
  }

  public int getBatch_sizeSize() {
    return (this.batch_size == null) ? 0 : this.batch_size.size();
  }

  public void putToBatch_size(java.lang.String key, java.util.Map<java.lang.String,java.lang.Long> val) {
    if (this.batch_size == null) {
      this.batch_size = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>();
    }
    this.batch_size.put(key, val);
  }

  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> getBatch_size() {
    return this.batch_size;
  }

  public GPUBoltStats setBatch_size(java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>> batch_size) {
    this.batch_size = batch_size;
    return this;
  }

  public void unsetBatch_size() {
    this.batch_size = null;
  }

  /** Returns true if field batch_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBatch_size() {
    return this.batch_size != null;
  }

  public void setBatch_sizeIsSet(boolean value) {
    if (!value) {
      this.batch_size = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACKED:
      if (value == null) {
        unsetAcked();
      } else {
        setAcked((java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>)value);
      }
      break;

    case FAILED:
      if (value == null) {
        unsetFailed();
      } else {
        setFailed((java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>)value);
      }
      break;

    case BATCH_SIZE:
      if (value == null) {
        unsetBatch_size();
      } else {
        setBatch_size((java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACKED:
      return getAcked();

    case FAILED:
      return getFailed();

    case BATCH_SIZE:
      return getBatch_size();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACKED:
      return isSetAcked();
    case FAILED:
      return isSetFailed();
    case BATCH_SIZE:
      return isSetBatch_size();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GPUBoltStats)
      return this.equals((GPUBoltStats)that);
    return false;
  }

  public boolean equals(GPUBoltStats that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_acked = true && this.isSetAcked();
    boolean that_present_acked = true && that.isSetAcked();
    if (this_present_acked || that_present_acked) {
      if (!(this_present_acked && that_present_acked))
        return false;
      if (!this.acked.equals(that.acked))
        return false;
    }

    boolean this_present_failed = true && this.isSetFailed();
    boolean that_present_failed = true && that.isSetFailed();
    if (this_present_failed || that_present_failed) {
      if (!(this_present_failed && that_present_failed))
        return false;
      if (!this.failed.equals(that.failed))
        return false;
    }

    boolean this_present_batch_size = true && this.isSetBatch_size();
    boolean that_present_batch_size = true && that.isSetBatch_size();
    if (this_present_batch_size || that_present_batch_size) {
      if (!(this_present_batch_size && that_present_batch_size))
        return false;
      if (!this.batch_size.equals(that.batch_size))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAcked()) ? 131071 : 524287);
    if (isSetAcked())
      hashCode = hashCode * 8191 + acked.hashCode();

    hashCode = hashCode * 8191 + ((isSetFailed()) ? 131071 : 524287);
    if (isSetFailed())
      hashCode = hashCode * 8191 + failed.hashCode();

    hashCode = hashCode * 8191 + ((isSetBatch_size()) ? 131071 : 524287);
    if (isSetBatch_size())
      hashCode = hashCode * 8191 + batch_size.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GPUBoltStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAcked()).compareTo(other.isSetAcked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acked, other.acked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailed()).compareTo(other.isSetFailed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failed, other.failed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBatch_size()).compareTo(other.isSetBatch_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatch_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batch_size, other.batch_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GPUBoltStats(");
    boolean first = true;

    sb.append("acked:");
    if (this.acked == null) {
      sb.append("null");
    } else {
      sb.append(this.acked);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("failed:");
    if (this.failed == null) {
      sb.append("null");
    } else {
      sb.append(this.failed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("batch_size:");
    if (this.batch_size == null) {
      sb.append("null");
    } else {
      sb.append(this.batch_size);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (acked == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'acked' was not present! Struct: " + toString());
    }
    if (failed == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'failed' was not present! Struct: " + toString());
    }
    if (batch_size == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'batch_size' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GPUBoltStatsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GPUBoltStatsStandardScheme getScheme() {
      return new GPUBoltStatsStandardScheme();
    }
  }

  private static class GPUBoltStatsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GPUBoltStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GPUBoltStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACKED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map286 = iprot.readMapBegin();
                struct.acked = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>(2*_map286.size);
                java.lang.String _key287;
                java.util.Map<java.lang.String,java.lang.Long> _val288;
                for (int _i289 = 0; _i289 < _map286.size; ++_i289)
                {
                  _key287 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map290 = iprot.readMapBegin();
                    _val288 = new java.util.HashMap<java.lang.String,java.lang.Long>(2*_map290.size);
                    java.lang.String _key291;
                    long _val292;
                    for (int _i293 = 0; _i293 < _map290.size; ++_i293)
                    {
                      _key291 = iprot.readString();
                      _val292 = iprot.readI64();
                      _val288.put(_key291, _val292);
                    }
                    iprot.readMapEnd();
                  }
                  struct.acked.put(_key287, _val288);
                }
                iprot.readMapEnd();
              }
              struct.setAckedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAILED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map294 = iprot.readMapBegin();
                struct.failed = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>(2*_map294.size);
                java.lang.String _key295;
                java.util.Map<java.lang.String,java.lang.Long> _val296;
                for (int _i297 = 0; _i297 < _map294.size; ++_i297)
                {
                  _key295 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map298 = iprot.readMapBegin();
                    _val296 = new java.util.HashMap<java.lang.String,java.lang.Long>(2*_map298.size);
                    java.lang.String _key299;
                    long _val300;
                    for (int _i301 = 0; _i301 < _map298.size; ++_i301)
                    {
                      _key299 = iprot.readString();
                      _val300 = iprot.readI64();
                      _val296.put(_key299, _val300);
                    }
                    iprot.readMapEnd();
                  }
                  struct.failed.put(_key295, _val296);
                }
                iprot.readMapEnd();
              }
              struct.setFailedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BATCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map302 = iprot.readMapBegin();
                struct.batch_size = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>(2*_map302.size);
                java.lang.String _key303;
                java.util.Map<java.lang.String,java.lang.Long> _val304;
                for (int _i305 = 0; _i305 < _map302.size; ++_i305)
                {
                  _key303 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map306 = iprot.readMapBegin();
                    _val304 = new java.util.HashMap<java.lang.String,java.lang.Long>(2*_map306.size);
                    java.lang.String _key307;
                    long _val308;
                    for (int _i309 = 0; _i309 < _map306.size; ++_i309)
                    {
                      _key307 = iprot.readString();
                      _val308 = iprot.readI64();
                      _val304.put(_key307, _val308);
                    }
                    iprot.readMapEnd();
                  }
                  struct.batch_size.put(_key303, _val304);
                }
                iprot.readMapEnd();
              }
              struct.setBatch_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GPUBoltStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.acked != null) {
        oprot.writeFieldBegin(ACKED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.acked.size()));
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.Long>> _iter310 : struct.acked.entrySet())
          {
            oprot.writeString(_iter310.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, _iter310.getValue().size()));
              for (java.util.Map.Entry<java.lang.String, java.lang.Long> _iter311 : _iter310.getValue().entrySet())
              {
                oprot.writeString(_iter311.getKey());
                oprot.writeI64(_iter311.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.failed != null) {
        oprot.writeFieldBegin(FAILED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.failed.size()));
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.Long>> _iter312 : struct.failed.entrySet())
          {
            oprot.writeString(_iter312.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, _iter312.getValue().size()));
              for (java.util.Map.Entry<java.lang.String, java.lang.Long> _iter313 : _iter312.getValue().entrySet())
              {
                oprot.writeString(_iter313.getKey());
                oprot.writeI64(_iter313.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.batch_size != null) {
        oprot.writeFieldBegin(BATCH_SIZE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.batch_size.size()));
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.Long>> _iter314 : struct.batch_size.entrySet())
          {
            oprot.writeString(_iter314.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, _iter314.getValue().size()));
              for (java.util.Map.Entry<java.lang.String, java.lang.Long> _iter315 : _iter314.getValue().entrySet())
              {
                oprot.writeString(_iter315.getKey());
                oprot.writeI64(_iter315.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GPUBoltStatsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GPUBoltStatsTupleScheme getScheme() {
      return new GPUBoltStatsTupleScheme();
    }
  }

  private static class GPUBoltStatsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GPUBoltStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GPUBoltStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.acked.size());
        for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.Long>> _iter316 : struct.acked.entrySet())
        {
          oprot.writeString(_iter316.getKey());
          {
            oprot.writeI32(_iter316.getValue().size());
            for (java.util.Map.Entry<java.lang.String, java.lang.Long> _iter317 : _iter316.getValue().entrySet())
            {
              oprot.writeString(_iter317.getKey());
              oprot.writeI64(_iter317.getValue());
            }
          }
        }
      }
      {
        oprot.writeI32(struct.failed.size());
        for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.Long>> _iter318 : struct.failed.entrySet())
        {
          oprot.writeString(_iter318.getKey());
          {
            oprot.writeI32(_iter318.getValue().size());
            for (java.util.Map.Entry<java.lang.String, java.lang.Long> _iter319 : _iter318.getValue().entrySet())
            {
              oprot.writeString(_iter319.getKey());
              oprot.writeI64(_iter319.getValue());
            }
          }
        }
      }
      {
        oprot.writeI32(struct.batch_size.size());
        for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.Long>> _iter320 : struct.batch_size.entrySet())
        {
          oprot.writeString(_iter320.getKey());
          {
            oprot.writeI32(_iter320.getValue().size());
            for (java.util.Map.Entry<java.lang.String, java.lang.Long> _iter321 : _iter320.getValue().entrySet())
            {
              oprot.writeString(_iter321.getKey());
              oprot.writeI64(_iter321.getValue());
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GPUBoltStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map322 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.acked = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>(2*_map322.size);
        java.lang.String _key323;
        java.util.Map<java.lang.String,java.lang.Long> _val324;
        for (int _i325 = 0; _i325 < _map322.size; ++_i325)
        {
          _key323 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map326 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            _val324 = new java.util.HashMap<java.lang.String,java.lang.Long>(2*_map326.size);
            java.lang.String _key327;
            long _val328;
            for (int _i329 = 0; _i329 < _map326.size; ++_i329)
            {
              _key327 = iprot.readString();
              _val328 = iprot.readI64();
              _val324.put(_key327, _val328);
            }
          }
          struct.acked.put(_key323, _val324);
        }
      }
      struct.setAckedIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map330 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.failed = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>(2*_map330.size);
        java.lang.String _key331;
        java.util.Map<java.lang.String,java.lang.Long> _val332;
        for (int _i333 = 0; _i333 < _map330.size; ++_i333)
        {
          _key331 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map334 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            _val332 = new java.util.HashMap<java.lang.String,java.lang.Long>(2*_map334.size);
            java.lang.String _key335;
            long _val336;
            for (int _i337 = 0; _i337 < _map334.size; ++_i337)
            {
              _key335 = iprot.readString();
              _val336 = iprot.readI64();
              _val332.put(_key335, _val336);
            }
          }
          struct.failed.put(_key331, _val332);
        }
      }
      struct.setFailedIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map338 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.batch_size = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.Long>>(2*_map338.size);
        java.lang.String _key339;
        java.util.Map<java.lang.String,java.lang.Long> _val340;
        for (int _i341 = 0; _i341 < _map338.size; ++_i341)
        {
          _key339 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map342 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            _val340 = new java.util.HashMap<java.lang.String,java.lang.Long>(2*_map342.size);
            java.lang.String _key343;
            long _val344;
            for (int _i345 = 0; _i345 < _map342.size; ++_i345)
            {
              _key343 = iprot.readString();
              _val344 = iprot.readI64();
              _val340.put(_key343, _val344);
            }
          }
          struct.batch_size.put(_key339, _val340);
        }
      }
      struct.setBatch_sizeIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

