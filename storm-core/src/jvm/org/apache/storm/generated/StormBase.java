/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class StormBase implements org.apache.thrift.TBase<StormBase, StormBase._Fields>, java.io.Serializable, Cloneable, Comparable<StormBase> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StormBase");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_WORKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_workers", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COMPONENT_EXECUTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("component_executors", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField LAUNCH_TIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("launch_time_secs", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_ACTION_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_action_options", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField PREV_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("prev_status", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField COMPONENT_DEBUG_FIELD_DESC = new org.apache.thrift.protocol.TField("component_debug", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StormBaseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StormBaseTupleSchemeFactory();

  public java.lang.String name; // required
  /**
   * 
   * @see TopologyStatus
   */
  public TopologyStatus status; // required
  public int num_workers; // required
  public java.util.Map<java.lang.String,java.lang.Integer> component_executors; // optional
  public int launch_time_secs; // optional
  public java.lang.String owner; // optional
  public TopologyActionOptions topology_action_options; // optional
  /**
   * 
   * @see TopologyStatus
   */
  public TopologyStatus prev_status; // optional
  public java.util.Map<java.lang.String,DebugOptions> component_debug; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    /**
     * 
     * @see TopologyStatus
     */
    STATUS((short)2, "status"),
    NUM_WORKERS((short)3, "num_workers"),
    COMPONENT_EXECUTORS((short)4, "component_executors"),
    LAUNCH_TIME_SECS((short)5, "launch_time_secs"),
    OWNER((short)6, "owner"),
    TOPOLOGY_ACTION_OPTIONS((short)7, "topology_action_options"),
    /**
     * 
     * @see TopologyStatus
     */
    PREV_STATUS((short)8, "prev_status"),
    COMPONENT_DEBUG((short)9, "component_debug");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // STATUS
          return STATUS;
        case 3: // NUM_WORKERS
          return NUM_WORKERS;
        case 4: // COMPONENT_EXECUTORS
          return COMPONENT_EXECUTORS;
        case 5: // LAUNCH_TIME_SECS
          return LAUNCH_TIME_SECS;
        case 6: // OWNER
          return OWNER;
        case 7: // TOPOLOGY_ACTION_OPTIONS
          return TOPOLOGY_ACTION_OPTIONS;
        case 8: // PREV_STATUS
          return PREV_STATUS;
        case 9: // COMPONENT_DEBUG
          return COMPONENT_DEBUG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_WORKERS_ISSET_ID = 0;
  private static final int __LAUNCH_TIME_SECS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMPONENT_EXECUTORS,_Fields.LAUNCH_TIME_SECS,_Fields.OWNER,_Fields.TOPOLOGY_ACTION_OPTIONS,_Fields.PREV_STATUS,_Fields.COMPONENT_DEBUG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TopologyStatus.class)));
    tmpMap.put(_Fields.NUM_WORKERS, new org.apache.thrift.meta_data.FieldMetaData("num_workers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPONENT_EXECUTORS, new org.apache.thrift.meta_data.FieldMetaData("component_executors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LAUNCH_TIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("launch_time_secs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPOLOGY_ACTION_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("topology_action_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopologyActionOptions.class)));
    tmpMap.put(_Fields.PREV_STATUS, new org.apache.thrift.meta_data.FieldMetaData("prev_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TopologyStatus.class)));
    tmpMap.put(_Fields.COMPONENT_DEBUG, new org.apache.thrift.meta_data.FieldMetaData("component_debug", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DebugOptions.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StormBase.class, metaDataMap);
  }

  public StormBase() {
  }

  public StormBase(
    java.lang.String name,
    TopologyStatus status,
    int num_workers)
  {
    this();
    this.name = name;
    this.status = status;
    this.num_workers = num_workers;
    setNum_workersIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StormBase(StormBase other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.num_workers = other.num_workers;
    if (other.isSetComponent_executors()) {
      java.util.Map<java.lang.String,java.lang.Integer> __this__component_executors = new java.util.HashMap<java.lang.String,java.lang.Integer>(other.component_executors);
      this.component_executors = __this__component_executors;
    }
    this.launch_time_secs = other.launch_time_secs;
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetTopology_action_options()) {
      this.topology_action_options = new TopologyActionOptions(other.topology_action_options);
    }
    if (other.isSetPrev_status()) {
      this.prev_status = other.prev_status;
    }
    if (other.isSetComponent_debug()) {
      java.util.Map<java.lang.String,DebugOptions> __this__component_debug = new java.util.HashMap<java.lang.String,DebugOptions>(other.component_debug.size());
      for (java.util.Map.Entry<java.lang.String, DebugOptions> other_element : other.component_debug.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        DebugOptions other_element_value = other_element.getValue();

        java.lang.String __this__component_debug_copy_key = other_element_key;

        DebugOptions __this__component_debug_copy_value = new DebugOptions(other_element_value);

        __this__component_debug.put(__this__component_debug_copy_key, __this__component_debug_copy_value);
      }
      this.component_debug = __this__component_debug;
    }
  }

  public StormBase deepCopy() {
    return new StormBase(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.status = null;
    setNum_workersIsSet(false);
    this.num_workers = 0;
    this.component_executors = null;
    setLaunch_time_secsIsSet(false);
    this.launch_time_secs = 0;
    this.owner = null;
    this.topology_action_options = null;
    this.prev_status = null;
    this.component_debug = null;
  }

  public java.lang.String getName() {
    return this.name;
  }

  public StormBase setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see TopologyStatus
   */
  public TopologyStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see TopologyStatus
   */
  public StormBase setStatus(TopologyStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getNum_workers() {
    return this.num_workers;
  }

  public StormBase setNum_workers(int num_workers) {
    this.num_workers = num_workers;
    setNum_workersIsSet(true);
    return this;
  }

  public void unsetNum_workers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID);
  }

  /** Returns true if field num_workers is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_workers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID);
  }

  public void setNum_workersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID, value);
  }

  public int getComponent_executorsSize() {
    return (this.component_executors == null) ? 0 : this.component_executors.size();
  }

  public void putToComponent_executors(java.lang.String key, int val) {
    if (this.component_executors == null) {
      this.component_executors = new java.util.HashMap<java.lang.String,java.lang.Integer>();
    }
    this.component_executors.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.Integer> getComponent_executors() {
    return this.component_executors;
  }

  public StormBase setComponent_executors(java.util.Map<java.lang.String,java.lang.Integer> component_executors) {
    this.component_executors = component_executors;
    return this;
  }

  public void unsetComponent_executors() {
    this.component_executors = null;
  }

  /** Returns true if field component_executors is set (has been assigned a value) and false otherwise */
  public boolean isSetComponent_executors() {
    return this.component_executors != null;
  }

  public void setComponent_executorsIsSet(boolean value) {
    if (!value) {
      this.component_executors = null;
    }
  }

  public int getLaunch_time_secs() {
    return this.launch_time_secs;
  }

  public StormBase setLaunch_time_secs(int launch_time_secs) {
    this.launch_time_secs = launch_time_secs;
    setLaunch_time_secsIsSet(true);
    return this;
  }

  public void unsetLaunch_time_secs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAUNCH_TIME_SECS_ISSET_ID);
  }

  /** Returns true if field launch_time_secs is set (has been assigned a value) and false otherwise */
  public boolean isSetLaunch_time_secs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAUNCH_TIME_SECS_ISSET_ID);
  }

  public void setLaunch_time_secsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAUNCH_TIME_SECS_ISSET_ID, value);
  }

  public java.lang.String getOwner() {
    return this.owner;
  }

  public StormBase setOwner(java.lang.String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public TopologyActionOptions getTopology_action_options() {
    return this.topology_action_options;
  }

  public StormBase setTopology_action_options(TopologyActionOptions topology_action_options) {
    this.topology_action_options = topology_action_options;
    return this;
  }

  public void unsetTopology_action_options() {
    this.topology_action_options = null;
  }

  /** Returns true if field topology_action_options is set (has been assigned a value) and false otherwise */
  public boolean isSetTopology_action_options() {
    return this.topology_action_options != null;
  }

  public void setTopology_action_optionsIsSet(boolean value) {
    if (!value) {
      this.topology_action_options = null;
    }
  }

  /**
   * 
   * @see TopologyStatus
   */
  public TopologyStatus getPrev_status() {
    return this.prev_status;
  }

  /**
   * 
   * @see TopologyStatus
   */
  public StormBase setPrev_status(TopologyStatus prev_status) {
    this.prev_status = prev_status;
    return this;
  }

  public void unsetPrev_status() {
    this.prev_status = null;
  }

  /** Returns true if field prev_status is set (has been assigned a value) and false otherwise */
  public boolean isSetPrev_status() {
    return this.prev_status != null;
  }

  public void setPrev_statusIsSet(boolean value) {
    if (!value) {
      this.prev_status = null;
    }
  }

  public int getComponent_debugSize() {
    return (this.component_debug == null) ? 0 : this.component_debug.size();
  }

  public void putToComponent_debug(java.lang.String key, DebugOptions val) {
    if (this.component_debug == null) {
      this.component_debug = new java.util.HashMap<java.lang.String,DebugOptions>();
    }
    this.component_debug.put(key, val);
  }

  public java.util.Map<java.lang.String,DebugOptions> getComponent_debug() {
    return this.component_debug;
  }

  public StormBase setComponent_debug(java.util.Map<java.lang.String,DebugOptions> component_debug) {
    this.component_debug = component_debug;
    return this;
  }

  public void unsetComponent_debug() {
    this.component_debug = null;
  }

  /** Returns true if field component_debug is set (has been assigned a value) and false otherwise */
  public boolean isSetComponent_debug() {
    return this.component_debug != null;
  }

  public void setComponent_debugIsSet(boolean value) {
    if (!value) {
      this.component_debug = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((TopologyStatus)value);
      }
      break;

    case NUM_WORKERS:
      if (value == null) {
        unsetNum_workers();
      } else {
        setNum_workers((java.lang.Integer)value);
      }
      break;

    case COMPONENT_EXECUTORS:
      if (value == null) {
        unsetComponent_executors();
      } else {
        setComponent_executors((java.util.Map<java.lang.String,java.lang.Integer>)value);
      }
      break;

    case LAUNCH_TIME_SECS:
      if (value == null) {
        unsetLaunch_time_secs();
      } else {
        setLaunch_time_secs((java.lang.Integer)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((java.lang.String)value);
      }
      break;

    case TOPOLOGY_ACTION_OPTIONS:
      if (value == null) {
        unsetTopology_action_options();
      } else {
        setTopology_action_options((TopologyActionOptions)value);
      }
      break;

    case PREV_STATUS:
      if (value == null) {
        unsetPrev_status();
      } else {
        setPrev_status((TopologyStatus)value);
      }
      break;

    case COMPONENT_DEBUG:
      if (value == null) {
        unsetComponent_debug();
      } else {
        setComponent_debug((java.util.Map<java.lang.String,DebugOptions>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case STATUS:
      return getStatus();

    case NUM_WORKERS:
      return getNum_workers();

    case COMPONENT_EXECUTORS:
      return getComponent_executors();

    case LAUNCH_TIME_SECS:
      return getLaunch_time_secs();

    case OWNER:
      return getOwner();

    case TOPOLOGY_ACTION_OPTIONS:
      return getTopology_action_options();

    case PREV_STATUS:
      return getPrev_status();

    case COMPONENT_DEBUG:
      return getComponent_debug();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case STATUS:
      return isSetStatus();
    case NUM_WORKERS:
      return isSetNum_workers();
    case COMPONENT_EXECUTORS:
      return isSetComponent_executors();
    case LAUNCH_TIME_SECS:
      return isSetLaunch_time_secs();
    case OWNER:
      return isSetOwner();
    case TOPOLOGY_ACTION_OPTIONS:
      return isSetTopology_action_options();
    case PREV_STATUS:
      return isSetPrev_status();
    case COMPONENT_DEBUG:
      return isSetComponent_debug();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StormBase)
      return this.equals((StormBase)that);
    return false;
  }

  public boolean equals(StormBase that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_num_workers = true;
    boolean that_present_num_workers = true;
    if (this_present_num_workers || that_present_num_workers) {
      if (!(this_present_num_workers && that_present_num_workers))
        return false;
      if (this.num_workers != that.num_workers)
        return false;
    }

    boolean this_present_component_executors = true && this.isSetComponent_executors();
    boolean that_present_component_executors = true && that.isSetComponent_executors();
    if (this_present_component_executors || that_present_component_executors) {
      if (!(this_present_component_executors && that_present_component_executors))
        return false;
      if (!this.component_executors.equals(that.component_executors))
        return false;
    }

    boolean this_present_launch_time_secs = true && this.isSetLaunch_time_secs();
    boolean that_present_launch_time_secs = true && that.isSetLaunch_time_secs();
    if (this_present_launch_time_secs || that_present_launch_time_secs) {
      if (!(this_present_launch_time_secs && that_present_launch_time_secs))
        return false;
      if (this.launch_time_secs != that.launch_time_secs)
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_topology_action_options = true && this.isSetTopology_action_options();
    boolean that_present_topology_action_options = true && that.isSetTopology_action_options();
    if (this_present_topology_action_options || that_present_topology_action_options) {
      if (!(this_present_topology_action_options && that_present_topology_action_options))
        return false;
      if (!this.topology_action_options.equals(that.topology_action_options))
        return false;
    }

    boolean this_present_prev_status = true && this.isSetPrev_status();
    boolean that_present_prev_status = true && that.isSetPrev_status();
    if (this_present_prev_status || that_present_prev_status) {
      if (!(this_present_prev_status && that_present_prev_status))
        return false;
      if (!this.prev_status.equals(that.prev_status))
        return false;
    }

    boolean this_present_component_debug = true && this.isSetComponent_debug();
    boolean that_present_component_debug = true && that.isSetComponent_debug();
    if (this_present_component_debug || that_present_component_debug) {
      if (!(this_present_component_debug && that_present_component_debug))
        return false;
      if (!this.component_debug.equals(that.component_debug))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.getValue();

    hashCode = hashCode * 8191 + num_workers;

    hashCode = hashCode * 8191 + ((isSetComponent_executors()) ? 131071 : 524287);
    if (isSetComponent_executors())
      hashCode = hashCode * 8191 + component_executors.hashCode();

    hashCode = hashCode * 8191 + ((isSetLaunch_time_secs()) ? 131071 : 524287);
    if (isSetLaunch_time_secs())
      hashCode = hashCode * 8191 + launch_time_secs;

    hashCode = hashCode * 8191 + ((isSetOwner()) ? 131071 : 524287);
    if (isSetOwner())
      hashCode = hashCode * 8191 + owner.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopology_action_options()) ? 131071 : 524287);
    if (isSetTopology_action_options())
      hashCode = hashCode * 8191 + topology_action_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrev_status()) ? 131071 : 524287);
    if (isSetPrev_status())
      hashCode = hashCode * 8191 + prev_status.getValue();

    hashCode = hashCode * 8191 + ((isSetComponent_debug()) ? 131071 : 524287);
    if (isSetComponent_debug())
      hashCode = hashCode * 8191 + component_debug.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StormBase other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum_workers()).compareTo(other.isSetNum_workers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_workers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_workers, other.num_workers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComponent_executors()).compareTo(other.isSetComponent_executors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComponent_executors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.component_executors, other.component_executors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLaunch_time_secs()).compareTo(other.isSetLaunch_time_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLaunch_time_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.launch_time_secs, other.launch_time_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopology_action_options()).compareTo(other.isSetTopology_action_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopology_action_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_action_options, other.topology_action_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrev_status()).compareTo(other.isSetPrev_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrev_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prev_status, other.prev_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComponent_debug()).compareTo(other.isSetComponent_debug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComponent_debug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.component_debug, other.component_debug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StormBase(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_workers:");
    sb.append(this.num_workers);
    first = false;
    if (isSetComponent_executors()) {
      if (!first) sb.append(", ");
      sb.append("component_executors:");
      if (this.component_executors == null) {
        sb.append("null");
      } else {
        sb.append(this.component_executors);
      }
      first = false;
    }
    if (isSetLaunch_time_secs()) {
      if (!first) sb.append(", ");
      sb.append("launch_time_secs:");
      sb.append(this.launch_time_secs);
      first = false;
    }
    if (isSetOwner()) {
      if (!first) sb.append(", ");
      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
    }
    if (isSetTopology_action_options()) {
      if (!first) sb.append(", ");
      sb.append("topology_action_options:");
      if (this.topology_action_options == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_action_options);
      }
      first = false;
    }
    if (isSetPrev_status()) {
      if (!first) sb.append(", ");
      sb.append("prev_status:");
      if (this.prev_status == null) {
        sb.append("null");
      } else {
        sb.append(this.prev_status);
      }
      first = false;
    }
    if (isSetComponent_debug()) {
      if (!first) sb.append(", ");
      sb.append("component_debug:");
      if (this.component_debug == null) {
        sb.append("null");
      } else {
        sb.append(this.component_debug);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'num_workers' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StormBaseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StormBaseStandardScheme getScheme() {
      return new StormBaseStandardScheme();
    }
  }

  private static class StormBaseStandardScheme extends org.apache.thrift.scheme.StandardScheme<StormBase> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StormBase struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = org.apache.storm.generated.TopologyStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_WORKERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_workers = iprot.readI32();
              struct.setNum_workersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPONENT_EXECUTORS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map674 = iprot.readMapBegin();
                struct.component_executors = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map674.size);
                java.lang.String _key675;
                int _val676;
                for (int _i677 = 0; _i677 < _map674.size; ++_i677)
                {
                  _key675 = iprot.readString();
                  _val676 = iprot.readI32();
                  struct.component_executors.put(_key675, _val676);
                }
                iprot.readMapEnd();
              }
              struct.setComponent_executorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAUNCH_TIME_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.launch_time_secs = iprot.readI32();
              struct.setLaunch_time_secsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOPOLOGY_ACTION_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.topology_action_options = new TopologyActionOptions();
              struct.topology_action_options.read(iprot);
              struct.setTopology_action_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PREV_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.prev_status = org.apache.storm.generated.TopologyStatus.findByValue(iprot.readI32());
              struct.setPrev_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMPONENT_DEBUG
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map678 = iprot.readMapBegin();
                struct.component_debug = new java.util.HashMap<java.lang.String,DebugOptions>(2*_map678.size);
                java.lang.String _key679;
                DebugOptions _val680;
                for (int _i681 = 0; _i681 < _map678.size; ++_i681)
                {
                  _key679 = iprot.readString();
                  _val680 = new DebugOptions();
                  _val680.read(iprot);
                  struct.component_debug.put(_key679, _val680);
                }
                iprot.readMapEnd();
              }
              struct.setComponent_debugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNum_workers()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_workers' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StormBase struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_WORKERS_FIELD_DESC);
      oprot.writeI32(struct.num_workers);
      oprot.writeFieldEnd();
      if (struct.component_executors != null) {
        if (struct.isSetComponent_executors()) {
          oprot.writeFieldBegin(COMPONENT_EXECUTORS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.component_executors.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter682 : struct.component_executors.entrySet())
            {
              oprot.writeString(_iter682.getKey());
              oprot.writeI32(_iter682.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLaunch_time_secs()) {
        oprot.writeFieldBegin(LAUNCH_TIME_SECS_FIELD_DESC);
        oprot.writeI32(struct.launch_time_secs);
        oprot.writeFieldEnd();
      }
      if (struct.owner != null) {
        if (struct.isSetOwner()) {
          oprot.writeFieldBegin(OWNER_FIELD_DESC);
          oprot.writeString(struct.owner);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topology_action_options != null) {
        if (struct.isSetTopology_action_options()) {
          oprot.writeFieldBegin(TOPOLOGY_ACTION_OPTIONS_FIELD_DESC);
          struct.topology_action_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.prev_status != null) {
        if (struct.isSetPrev_status()) {
          oprot.writeFieldBegin(PREV_STATUS_FIELD_DESC);
          oprot.writeI32(struct.prev_status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.component_debug != null) {
        if (struct.isSetComponent_debug()) {
          oprot.writeFieldBegin(COMPONENT_DEBUG_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.component_debug.size()));
            for (java.util.Map.Entry<java.lang.String, DebugOptions> _iter683 : struct.component_debug.entrySet())
            {
              oprot.writeString(_iter683.getKey());
              _iter683.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StormBaseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StormBaseTupleScheme getScheme() {
      return new StormBaseTupleScheme();
    }
  }

  private static class StormBaseTupleScheme extends org.apache.thrift.scheme.TupleScheme<StormBase> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StormBase struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeI32(struct.status.getValue());
      oprot.writeI32(struct.num_workers);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetComponent_executors()) {
        optionals.set(0);
      }
      if (struct.isSetLaunch_time_secs()) {
        optionals.set(1);
      }
      if (struct.isSetOwner()) {
        optionals.set(2);
      }
      if (struct.isSetTopology_action_options()) {
        optionals.set(3);
      }
      if (struct.isSetPrev_status()) {
        optionals.set(4);
      }
      if (struct.isSetComponent_debug()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetComponent_executors()) {
        {
          oprot.writeI32(struct.component_executors.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter684 : struct.component_executors.entrySet())
          {
            oprot.writeString(_iter684.getKey());
            oprot.writeI32(_iter684.getValue());
          }
        }
      }
      if (struct.isSetLaunch_time_secs()) {
        oprot.writeI32(struct.launch_time_secs);
      }
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
      if (struct.isSetTopology_action_options()) {
        struct.topology_action_options.write(oprot);
      }
      if (struct.isSetPrev_status()) {
        oprot.writeI32(struct.prev_status.getValue());
      }
      if (struct.isSetComponent_debug()) {
        {
          oprot.writeI32(struct.component_debug.size());
          for (java.util.Map.Entry<java.lang.String, DebugOptions> _iter685 : struct.component_debug.entrySet())
          {
            oprot.writeString(_iter685.getKey());
            _iter685.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StormBase struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.status = org.apache.storm.generated.TopologyStatus.findByValue(iprot.readI32());
      struct.setStatusIsSet(true);
      struct.num_workers = iprot.readI32();
      struct.setNum_workersIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map686 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.component_executors = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map686.size);
          java.lang.String _key687;
          int _val688;
          for (int _i689 = 0; _i689 < _map686.size; ++_i689)
          {
            _key687 = iprot.readString();
            _val688 = iprot.readI32();
            struct.component_executors.put(_key687, _val688);
          }
        }
        struct.setComponent_executorsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.launch_time_secs = iprot.readI32();
        struct.setLaunch_time_secsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(3)) {
        struct.topology_action_options = new TopologyActionOptions();
        struct.topology_action_options.read(iprot);
        struct.setTopology_action_optionsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.prev_status = org.apache.storm.generated.TopologyStatus.findByValue(iprot.readI32());
        struct.setPrev_statusIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map690 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.component_debug = new java.util.HashMap<java.lang.String,DebugOptions>(2*_map690.size);
          java.lang.String _key691;
          DebugOptions _val692;
          for (int _i693 = 0; _i693 < _map690.size; ++_i693)
          {
            _key691 = iprot.readString();
            _val692 = new DebugOptions();
            _val692.read(iprot);
            struct.component_debug.put(_key691, _val692);
          }
        }
        struct.setComponent_debugIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

