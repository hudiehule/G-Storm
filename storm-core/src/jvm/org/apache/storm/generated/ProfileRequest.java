/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class ProfileRequest implements org.apache.thrift.TBase<ProfileRequest, ProfileRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ProfileRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProfileRequest");

  private static final org.apache.thrift.protocol.TField NODE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("time_stamp", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProfileRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProfileRequestTupleSchemeFactory();

  public NodeInfo nodeInfo; // required
  /**
   * 
   * @see ProfileAction
   */
  public ProfileAction action; // required
  public long time_stamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_INFO((short)1, "nodeInfo"),
    /**
     * 
     * @see ProfileAction
     */
    ACTION((short)2, "action"),
    TIME_STAMP((short)3, "time_stamp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_INFO
          return NODE_INFO;
        case 2: // ACTION
          return ACTION;
        case 3: // TIME_STAMP
          return TIME_STAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_STAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TIME_STAMP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_INFO, new org.apache.thrift.meta_data.FieldMetaData("nodeInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProfileAction.class)));
    tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("time_stamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProfileRequest.class, metaDataMap);
  }

  public ProfileRequest() {
  }

  public ProfileRequest(
    NodeInfo nodeInfo,
    ProfileAction action)
  {
    this();
    this.nodeInfo = nodeInfo;
    this.action = action;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProfileRequest(ProfileRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNodeInfo()) {
      this.nodeInfo = new NodeInfo(other.nodeInfo);
    }
    if (other.isSetAction()) {
      this.action = other.action;
    }
    this.time_stamp = other.time_stamp;
  }

  public ProfileRequest deepCopy() {
    return new ProfileRequest(this);
  }

  @Override
  public void clear() {
    this.nodeInfo = null;
    this.action = null;
    setTime_stampIsSet(false);
    this.time_stamp = 0;
  }

  public NodeInfo getNodeInfo() {
    return this.nodeInfo;
  }

  public ProfileRequest setNodeInfo(NodeInfo nodeInfo) {
    this.nodeInfo = nodeInfo;
    return this;
  }

  public void unsetNodeInfo() {
    this.nodeInfo = null;
  }

  /** Returns true if field nodeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeInfo() {
    return this.nodeInfo != null;
  }

  public void setNodeInfoIsSet(boolean value) {
    if (!value) {
      this.nodeInfo = null;
    }
  }

  /**
   * 
   * @see ProfileAction
   */
  public ProfileAction getAction() {
    return this.action;
  }

  /**
   * 
   * @see ProfileAction
   */
  public ProfileRequest setAction(ProfileAction action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public long getTime_stamp() {
    return this.time_stamp;
  }

  public ProfileRequest setTime_stamp(long time_stamp) {
    this.time_stamp = time_stamp;
    setTime_stampIsSet(true);
    return this;
  }

  public void unsetTime_stamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_STAMP_ISSET_ID);
  }

  /** Returns true if field time_stamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_stamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_STAMP_ISSET_ID);
  }

  public void setTime_stampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_STAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NODE_INFO:
      if (value == null) {
        unsetNodeInfo();
      } else {
        setNodeInfo((NodeInfo)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((ProfileAction)value);
      }
      break;

    case TIME_STAMP:
      if (value == null) {
        unsetTime_stamp();
      } else {
        setTime_stamp((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_INFO:
      return getNodeInfo();

    case ACTION:
      return getAction();

    case TIME_STAMP:
      return getTime_stamp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NODE_INFO:
      return isSetNodeInfo();
    case ACTION:
      return isSetAction();
    case TIME_STAMP:
      return isSetTime_stamp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ProfileRequest)
      return this.equals((ProfileRequest)that);
    return false;
  }

  public boolean equals(ProfileRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nodeInfo = true && this.isSetNodeInfo();
    boolean that_present_nodeInfo = true && that.isSetNodeInfo();
    if (this_present_nodeInfo || that_present_nodeInfo) {
      if (!(this_present_nodeInfo && that_present_nodeInfo))
        return false;
      if (!this.nodeInfo.equals(that.nodeInfo))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_time_stamp = true && this.isSetTime_stamp();
    boolean that_present_time_stamp = true && that.isSetTime_stamp();
    if (this_present_time_stamp || that_present_time_stamp) {
      if (!(this_present_time_stamp && that_present_time_stamp))
        return false;
      if (this.time_stamp != that.time_stamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNodeInfo()) ? 131071 : 524287);
    if (isSetNodeInfo())
      hashCode = hashCode * 8191 + nodeInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
    if (isSetAction())
      hashCode = hashCode * 8191 + action.getValue();

    hashCode = hashCode * 8191 + ((isSetTime_stamp()) ? 131071 : 524287);
    if (isSetTime_stamp())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time_stamp);

    return hashCode;
  }

  @Override
  public int compareTo(ProfileRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNodeInfo()).compareTo(other.isSetNodeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeInfo, other.nodeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTime_stamp()).compareTo(other.isSetTime_stamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_stamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_stamp, other.time_stamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ProfileRequest(");
    boolean first = true;

    sb.append("nodeInfo:");
    if (this.nodeInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("action:");
    if (this.action == null) {
      sb.append("null");
    } else {
      sb.append(this.action);
    }
    first = false;
    if (isSetTime_stamp()) {
      if (!first) sb.append(", ");
      sb.append("time_stamp:");
      sb.append(this.time_stamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (nodeInfo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeInfo' was not present! Struct: " + toString());
    }
    if (action == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'action' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (nodeInfo != null) {
      nodeInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProfileRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileRequestStandardScheme getScheme() {
      return new ProfileRequestStandardScheme();
    }
  }

  private static class ProfileRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProfileRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProfileRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeInfo = new NodeInfo();
              struct.nodeInfo.read(iprot);
              struct.setNodeInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.action = org.apache.storm.generated.ProfileAction.findByValue(iprot.readI32());
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time_stamp = iprot.readI64();
              struct.setTime_stampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProfileRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeInfo != null) {
        oprot.writeFieldBegin(NODE_INFO_FIELD_DESC);
        struct.nodeInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeI32(struct.action.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetTime_stamp()) {
        oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
        oprot.writeI64(struct.time_stamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProfileRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProfileRequestTupleScheme getScheme() {
      return new ProfileRequestTupleScheme();
    }
  }

  private static class ProfileRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProfileRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProfileRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.nodeInfo.write(oprot);
      oprot.writeI32(struct.action.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTime_stamp()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTime_stamp()) {
        oprot.writeI64(struct.time_stamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProfileRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.nodeInfo = new NodeInfo();
      struct.nodeInfo.read(iprot);
      struct.setNodeInfoIsSet(true);
      struct.action = org.apache.storm.generated.ProfileAction.findByValue(iprot.readI32());
      struct.setActionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.time_stamp = iprot.readI64();
        struct.setTime_stampIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

